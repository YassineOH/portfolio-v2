---
import LeetCodeCard from '~/components/LeetCodeCard.astro';
import ContentWrapper from '~/components/ContentWrapper.astro';
import Base from '~/layouts/Base.astro';

import TechCards from '~/components/TechCards.astro';
---

<Base pageTitle='About me'>
  <main class='container mx-auto py-12 lg:py-24'>
    <ContentWrapper articleId='about-me'>
      <h1>About me</h1>
      <p>
        Hi, I'm <strong>Yassine OFQIR-HAMMA</strong> from Morocco, born in 1998.
        I studied renewable energy at university, but later decided to switch my
        career to web development. You can learn more about <a
          href='/en/#dev-journey-section'>my dev journey</a
        > and why I made this decision.
      </p>
      <p>
        Currently, I've been working as a solar engineer for 2 years, but I'm
        actively seeking new opportunities in web development. As you'll see in
        my projects section, I focus on building projects relevant to <em
          >solar energy</em
        > so that I can apply real use cases, avoiding generic and repetitive work.
      </p>
      <p>
        I'm passionate about tech, both hardware and software, but I also enjoy
        other interests like reading <em>Arabic literature</em> and playing video
        games.
      </p>
      <LeetCodeCard />
    </ContentWrapper>

    <section id='stack' class='py-12 lg:py-24'>
      <ContentWrapper>
        <h1>The stack I use</h1>
        <h2>
          It's all about <span class='bg-[#3178c6] text-white'>Type Safety</span
          >❤️.
        </h2>
        <p>
          TypeScript offers an exceptional developer experience, allowing for a
          seamless workflow across both client and server development. With the
          advent of <strong>React Server Components (RSC)</strong>, the
          distinction between client and server has become more fluid, making
          TypeScript's type safety even more valuable. It ensures that data
          integrity is maintained across the entire stack, so you can focus on
          building features without worrying about inconsistencies.
        </p>
        <p>
          When it comes to the main frameworks I use, my choice depends on the
          type of project. For static content-based sites, I prefer <strong>
            Astro.js</strong
          >, while for web applications, I typically go with <strong
            >Next.js</strong
          > and because they support different rendering patterns, such as <em
            >SSG</em
          >, <em>SSR</em>, and <em>CSR</em>.
        </p>
        <div class='space-y-4 pt-6'>
          <TechCards tag='language' title='Language' />
          <TechCards tag='framework' title='Frameworks' />
          <TechCards tag='core' title='UI library' />
          <TechCards tag='styling' title='Styling' />
          <TechCards tag='db' title='Databases and ORM' />
          <TechCards tag='state' title='State Management' />
          <TechCards tag='tool' title='Other Tools' />
          <TechCards tag='env' title='Dev Environment' />
          <TechCards tag='infra' title='Infra and serverless service' />
          <TechCards tag='design' title='Design and Assets' />
        </div>
      </ContentWrapper>
    </section>
  </main>
</Base>
